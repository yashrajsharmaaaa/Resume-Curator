name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'smoke'
        type: choice
        options:
          - smoke
          - full
          - user-journey
          - cross-browser
          - errors
          - accessibility
      browser:
        description: 'Browser to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox
            project: firefox
          - browser: webkit
            project: webkit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Start development server
        working-directory: frontend
        run: |
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 60000
        env:
          CI: true
          
      - name: Run E2E tests
        working-directory: frontend
        run: |
          if [ "${{ github.event.inputs.test_suite }}" != "" ]; then
            TEST_SUITE="${{ github.event.inputs.test_suite }}"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            TEST_SUITE="smoke"
          else
            TEST_SUITE="full"
          fi
          
          if [ "${{ github.event.inputs.browser }}" != "" ] && [ "${{ github.event.inputs.browser }}" != "all" ]; then
            npx playwright test --project=${{ github.event.inputs.browser }}
          else
            npx playwright test --project=${{ matrix.project }}
          fi
        env:
          CI: true
          BASE_URL: http://localhost:5173
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: frontend/playwright-report-${{ matrix.browser }}/
          retention-days: 30
          
      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-${{ matrix.browser }}
          path: frontend/test-results/
          retention-days: 30

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps chromium
        
      - name: Start development server
        working-directory: frontend
        run: |
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 60000
        env:
          CI: true
          
      - name: Run accessibility tests
        working-directory: frontend
        run: npx playwright test src/test/e2e/accessibility.spec.js --project=chromium
        env:
          CI: true
          BASE_URL: http://localhost:5173
          
      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: frontend/playwright-report/
          retention-days: 30

  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        device: ['Mobile Chrome', 'Mobile Safari']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps
        
      - name: Start development server
        working-directory: frontend
        run: |
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 60000
        env:
          CI: true
          
      - name: Run mobile tests
        working-directory: frontend
        run: npx playwright test --project="${{ matrix.device }}"
        env:
          CI: true
          BASE_URL: http://localhost:5173
          
      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-report-${{ matrix.device }}
          path: frontend/playwright-report/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps chromium
        
      - name: Start development server
        working-directory: frontend
        run: |
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 60000
        env:
          CI: true
          
      - name: Run performance tests
        working-directory: frontend
        run: npx playwright test src/test/e2e/user-journey.spec.js --grep="performance" --project=chromium
        env:
          CI: true
          BASE_URL: http://localhost:5173
          
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: frontend/playwright-report/
          retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests, accessibility-tests, mobile-tests, performance-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create test summary
        run: |
          echo "# E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Accessibility Tests**: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mobile Tests**: ${{ needs.mobile-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "The following test artifacts are available:" >> $GITHUB_STEP_SUMMARY
          echo "- Test reports (HTML)" >> $GITHUB_STEP_SUMMARY
          echo "- Screenshots and videos (on failure)" >> $GITHUB_STEP_SUMMARY
          echo "- Performance metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.e2e-tests.result }}" != "success" ] || 
             [ "${{ needs.accessibility-tests.result }}" != "success" ] || 
             [ "${{ needs.mobile-tests.result }}" != "success" ] || 
             [ "${{ needs.performance-tests.result }}" != "success" ]; then
            echo "## ❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the individual job logs and artifacts for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
            echo "Great job! All E2E tests are passing." >> $GITHUB_STEP_SUMMARY
          fi

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [e2e-tests, accessibility-tests, mobile-tests, performance-tests]
    if: always() && github.event_name == 'schedule'
    
    steps:
      - name: Notify Slack on failure
        if: |
          needs.e2e-tests.result == 'failure' ||
          needs.accessibility-tests.result == 'failure' ||
          needs.mobile-tests.result == 'failure' ||
          needs.performance-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'E2E tests failed in scheduled run'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on success
        if: |
          needs.e2e-tests.result == 'success' &&
          needs.accessibility-tests.result == 'success' &&
          needs.mobile-tests.result == 'success' &&
          needs.performance-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'All E2E tests passed in scheduled run'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}